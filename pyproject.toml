# ========================================
# Stock Tracker Telegram Bot - Modern Python Project Configuration
# pyproject.toml - PEP 621 compliant project metadata (2025)
# ========================================

[build-system]
requires = ["setuptools>=64", "wheel"]
build-backend = "setuptools.build_meta"

# ========================================
# PROJECT METADATA
# ========================================
[project]
name = "stock-tracker-bot"
version = "1.0.0"
description = "Advanced Telegram bot for tracking product availability in Israeli shopping clubs"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Your Name", email = "your.email@example.com"},
]
maintainers = [
    {name = "Your Name", email = "your.email@example.com"},
]
keywords = [
    "telegram", "bot", "stock", "tracker", "israel", 
    "shopping", "notifications", "scraping", "async"
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12", 
    "Programming Language :: Python :: 3.13",
    "Topic :: Communications :: Chat",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Framework :: AsyncIO",
    "Framework :: FastAPI",
]
requires-python = ">=3.11"

# Core dependencies
dependencies = [
    # Telegram Bot Framework
    "python-telegram-bot[all]==22.3",
    
    # Database
    "pymongo==4.14.1",
    "motor==3.6.0",  # Async MongoDB driver
    
    # Web Framework (for health checks and webhook)
    "fastapi==0.112.0",
    "uvicorn[standard]==0.30.5",
    
    # Web Scraping & HTTP
    "requests>=2.31.0",
    "aiohttp>=3.9.0",
    "beautifulsoup4>=4.12.0",
    "playwright>=1.46.0",
    "lxml>=5.0.0",
    
    # Async Task Scheduling
    "apscheduler>=3.10.0",
    
    # Environment & Configuration
    "python-dotenv>=1.0.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    
    # Data Processing
    "pandas>=2.2.0",
    
    # Date & Time
    "python-dateutil>=2.9.0",
    
    # Logging & Monitoring
    "structlog>=24.0.0",
    
    # Performance (Linux/Mac only)
    "uvloop>=0.19.0; platform_system != 'Windows'",
]

# Optional dependency groups
[project.optional-dependencies]
# Development dependencies
dev = [
    # Code formatting and linting (2025 tools)
    "black>=24.0.0",
    "ruff>=0.6.0",
    "isort>=5.13.0",
    
    # Type checking
    "mypy>=1.10.0",
    "types-requests>=2.31.0",
    "types-python-dateutil>=2.9.0",
    
    # Testing
    "pytest>=8.0.0",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=5.0.0",
    "pytest-mock>=3.14.0",
    "pytest-xdist>=3.6.0",  # Parallel testing
    "httpx>=0.27.0",  # For testing FastAPI
    
    # Security scanning
    "bandit[toml]>=1.7.0",
    "safety>=3.2.0",
    
    # Documentation
    "mkdocs>=1.6.0",
    "mkdocs-material>=9.5.0",
    
    # Pre-commit hooks
    "pre-commit>=3.8.0",
]

# Testing dependencies
test = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.24.0", 
    "pytest-cov>=5.0.0",
    "pytest-mock>=3.14.0",
    "httpx>=0.27.0",
    "mongomock>=4.1.0",  # Mock MongoDB for testing
]

# Production monitoring
monitoring = [
    "sentry-sdk[fastapi]>=2.8.0",
    "prometheus-client>=0.20.0",
    "opentelemetry-api>=1.25.0",
    "opentelemetry-sdk>=1.25.0",
]

# Documentation
docs = [
    "mkdocs>=1.6.0",
    "mkdocs-material>=9.5.0",
    "mkdocs-mermaid2-plugin>=1.1.0",
    "mkdocstrings[python]>=0.25.0",
]

# All optional dependencies
all = [
    "stock-tracker-bot[dev,test,monitoring,docs]"
]

[project.urls]
Homepage = "https://github.com/your-username/stock-tracker-bot"
Documentation = "https://your-username.github.io/stock-tracker-bot/"
Repository = "https://github.com/your-username/stock-tracker-bot.git"
Issues = "https://github.com/your-username/stock-tracker-bot/issues"
Changelog = "https://github.com/your-username/stock-tracker-bot/blob/main/CHANGELOG.md"

# Entry points for console scripts
[project.scripts]
stock-tracker-bot = "main:main"
bot-check-health = "main:health_check"

# ========================================
# TOOL CONFIGURATIONS
# ========================================

# Black code formatter
[tool.black]
line-length = 88
target-version = ['py311', 'py312', 'py313']
include = '\.pyi?$'
extend-exclude = '''
/(
    # directories
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | migrations
)/
'''

# Ruff linter (super fast Rust-based linter)
[tool.ruff]
target-version = "py311"
line-length = 88
indent-width = 4

[tool.ruff.lint]
# Enable all rules by default
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings  
    "F",   # Pyflakes
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "SIM", # flake8-simplify
    "I",   # isort
    "N",   # pep8-naming
    "C4",  # flake8-comprehensions
    "ICN", # flake8-import-conventions
    "PIE", # flake8-pie
    "PYI", # flake8-pyi
    "PT",  # flake8-pytest-style
    "RET", # flake8-return
    "RUF", # Ruff-specific rules
    "ASYNC", # flake8-async
]

ignore = [
    "E501",   # line too long, handled by black
    "B008",   # do not perform function calls in argument defaults
    "RUF012", # mutable class attributes
    "UP007",  # Use `X | Y` for type annotations (not ready yet)
    "B904",   # raise without from inside except
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv", 
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports in __init__.py
"tests/**/*.py" = [
    "S101",   # Allow assert in tests
    "PLR2004", # Magic value comparison in tests is OK
    "S106",   # Hardcoded passwords in tests are OK
    "ARG",    # Unused function arguments in tests
    "FBT",    # Boolean trap is OK in tests
]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.isort]
known-first-party = ["stock_tracker_bot"]
force-sort-within-sections = true

# MyPy type checking
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_optional = true
disallow_any_generics = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
strict_equality = true

# Per-module options
[[tool.mypy.overrides]]
module = [
    "telegram.*",
    "playwright.*", 
    "motor.*",
    "pymongo.*",
    "bson.*",
    "apscheduler.*",
    "structlog.*",
]
ignore_missing_imports = true

# Pytest configuration  
[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "--strict-markers",
    "--strict-config", 
    "--verbose",
    "--tb=short",
    "--cov=.",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
    "--asyncio-mode=auto",
]
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests", 
    "scraping: marks tests that do actual web scraping",
    "database: marks tests that require database",
    "telegram: marks tests that interact with Telegram API",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]
asyncio_mode = "auto"

# Coverage configuration
[tool.coverage.run]
source = ["."]
omit = [
    "tests/*",
    "venv/*",
    ".venv/*",
    "*/site-packages/*",
    ".tox/*",
    "setup.py",
]
branch = true

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError", 
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

# Bandit security linter
[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv"]
tests = ["B201", "B301", "B318", "B319", "B320", "B325", "B602", "B604"]
skips = [
    "B101",  # Skip assert_used test
    "B603",  # Skip subprocess_without_shell_equals_true 
]

[tool.bandit.assert_used]
skips = ['*_test.py', 'test_*.py']

# ========================================
# UV PACKAGE MANAGER CONFIGURATION
# ========================================
[tool.uv]
dev-dependencies = [
    "black>=24.0.0",
    "ruff>=0.6.0", 
    "mypy>=1.10.0",
    "pytest>=8.0.0",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=5.0.0",
    "bandit>=1.7.0",
    "pre-commit>=3.8.0",
]

# UV workspace configuration
[tool.uv.workspace]
members = ["."]

# ========================================
# SETUPTOOLS CONFIGURATION (for backwards compatibility)
# ========================================
[tool.setuptools]
include-package-data = true

[tool.setuptools.packages.find]
where = ["."]
include = ["*"]
exclude = ["tests*", "docs*", ".github*"]

[tool.setuptools.package-data]
"*" = ["*.txt", "*.md", "*.yml", "*.yaml", "*.json"]

# ========================================
# PRE-COMMIT HOOKS
# ========================================
# This section is for documentation - actual config is in .pre-commit-config.yaml
# Uncomment if you want to configure pre-commit here instead
# [tool.pre-commit]
# repos = [
#     {repo = "https://github.com/pre-commit/pre-commit-hooks", rev = "v4.6.0"},
#     {repo = "https://github.com/psf/black", rev = "24.8.0"}, 
#     {repo = "https://github.com/astral-sh/ruff-pre-commit", rev = "v0.6.0"},
#     {repo = "https://github.com/pre-commit/mirrors-mypy", rev = "v1.10.0"},
# ]
