# ===========================================
# Stock Tracker Telegram Bot - Environment Variables
# Copy this file to .env and fill in your actual values
# ===========================================

# ===========================================
# ü§ñ TELEGRAM BOT CONFIGURATION
# ===========================================

# Get from @BotFather on Telegram
TELEGRAM_TOKEN=1234567890:ABCdefGHIjklMNOpqrsTUVwxyz

# Webhook URL (for production deployment on Render)
# Format: https://your-app.onrender.com
WEBHOOK_URL=https://stock-tracker-bot.onrender.com

# Port for the web server (Render uses 10000 by default)
PORT=10000

# ===========================================
# üóÑÔ∏è DATABASE CONFIGURATION  
# ===========================================

# MongoDB Connection URI
# For MongoDB Atlas: mongodb+srv://username:password@cluster.mongodb.net/
# For local MongoDB: mongodb://localhost:27017/
MONGODB_URI=mongodb+srv://your_username:your_password@cluster0.mongodb.net/

# Database name
DB_NAME=stock_tracker_bot

# ===========================================
# üï∑Ô∏è SCRAPING CONFIGURATION
# ===========================================

# Timeout for web requests (seconds)
SCRAPER_TIMEOUT=30

# Maximum concurrent requests to avoid overwhelming servers
MAX_CONCURRENT_REQUESTS=10

# User agent string for web requests
USER_AGENT=StockTracker Bot/1.0 (https://your-bot.onrender.com)

# ===========================================
# ‚è∞ SCHEDULING CONFIGURATION
# ===========================================

# Default interval between stock checks (minutes)
DEFAULT_CHECK_INTERVAL=60

# Minimum allowed check interval (minutes) 
MIN_CHECK_INTERVAL=10

# Maximum allowed check interval (minutes)
MAX_CHECK_INTERVAL=1440

# ===========================================
# üõ°Ô∏è RATE LIMITING & SECURITY
# ===========================================

# Maximum requests per user per day
RATE_LIMIT_PER_USER=50

# Rate limit window (seconds) - 86400 = 24 hours
RATE_LIMIT_WINDOW=86400

# ===========================================
# üåç ENVIRONMENT & DEPLOYMENT
# ===========================================

# Environment: development, staging, production
ENVIRONMENT=development

# Enable debug mode (true/false)
DEBUG=false

# Logging level: DEBUG, INFO, WARNING, ERROR, CRITICAL
LOG_LEVEL=INFO

# Python version (for deployment)
PYTHON_VERSION=3.12

# ===========================================
# üìä MONITORING & ANALYTICS (Optional)
# ===========================================

# Discord webhook for deployment notifications
DISCORD_WEBHOOK=https://discord.com/api/webhooks/your/webhook/url

# Sentry DSN for error tracking (optional)
# SENTRY_DSN=https://your-sentry-dsn@sentry.io/project-id

# Google Analytics tracking ID (for web interface, optional)
# GA_TRACKING_ID=GA-XXXXXXXXX-X

# ===========================================
# üîê EXTERNAL SERVICES (Optional)
# ===========================================

# Redis URL for caching (if using Redis)
# REDIS_URL=redis://localhost:6379

# Telegram API Server (if using custom server)
# TELEGRAM_API_URL=https://api.telegram.org

# ===========================================
# üè™ STORE-SPECIFIC CONFIGURATIONS (Advanced)
# ===========================================

# Custom timeouts per store (optional)
# MASHKAR_TIMEOUT=45
# HOT_TIMEOUT=30
# CORPORATE_TIMEOUT=35

# Custom user agents per store (optional)
# MASHKAR_USER_AGENT=Custom Bot for Mashkar
# HOT_USER_AGENT=Custom Bot for Hot

# API keys for stores that have APIs (if available)
# MASHKAR_API_KEY=your_mashkar_api_key
# CORPORATE_API_KEY=your_corporate_api_key

# ===========================================
# üß™ TESTING CONFIGURATION
# ===========================================

# Test database (for running tests)
TEST_DB_NAME=stock_tracker_test

# Test Telegram token (for integration tests)
# TEST_TELEGRAM_TOKEN=test_bot_token

# Mock external services during testing
MOCK_EXTERNAL_SERVICES=true

# ===========================================
# üê≥ DOCKER CONFIGURATION (if using Docker)
# ===========================================

# Docker image tag
# DOCKER_IMAGE_TAG=latest

# Container port mapping
# CONTAINER_PORT=10000

# ===========================================
# ‚ö° PERFORMANCE TUNING (Advanced)
# ===========================================

# Database connection pool settings
# DB_MIN_POOL_SIZE=2
# DB_MAX_POOL_SIZE=10

# HTTP client connection pool
# HTTP_POOL_CONNECTIONS=100
# HTTP_POOL_MAXSIZE=100

# Async worker limits
# MAX_WORKERS=4
# WORKER_TIMEOUT=300

# Playwright browser settings
# PLAYWRIGHT_HEADLESS=true
# PLAYWRIGHT_TIMEOUT=30000

# ===========================================
# üì± TELEGRAM BOT ADVANCED SETTINGS
# ===========================================

# Bot description and commands
BOT_DESCRIPTION="Bot for tracking product availability in Israeli shopping clubs"
BOT_SHORT_DESCRIPTION="Track product availability"

# Webhook settings
# WEBHOOK_SECRET_TOKEN=your_webhook_secret
# WEBHOOK_MAX_CONNECTIONS=40
# WEBHOOK_ALLOWED_UPDATES=message,callback_query

# Bot API limits
# TELEGRAM_RATE_LIMIT_MESSAGES_PER_SECOND=30
# TELEGRAM_RATE_LIMIT_MESSAGES_PER_MINUTE=20

# ===========================================
# üîç DEBUGGING & DEVELOPMENT
# ===========================================

# Enable verbose logging for specific components
# DEBUG_DATABASE=false
# DEBUG_SCRAPER=false  
# DEBUG_SCHEDULER=false
# DEBUG_TELEGRAM=false

# Enable request/response logging
# LOG_HTTP_REQUESTS=false
# LOG_HTTP_RESPONSES=false

# Save scraped HTML for debugging
# SAVE_SCRAPED_HTML=false
# SCRAPED_HTML_DIR=./debug/html

# ===========================================
# üìß EMAIL NOTIFICATIONS (Optional)
# ===========================================

# SMTP settings for email notifications
# SMTP_HOST=smtp.gmail.com
# SMTP_PORT=587
# SMTP_USER=your_email@gmail.com
# SMTP_PASSWORD=your_app_password
# SMTP_FROM_EMAIL=bot@your-domain.com

# ===========================================
# ‚òÅÔ∏è CLOUD PROVIDER SETTINGS
# ===========================================

# Render.com specific
# RENDER_EXTERNAL_URL=https://your-app.onrender.com
# RENDER_INTERNAL_HOSTNAME=your-app
# RENDER_SERVICE_ID=srv-xxxxxxxxxxxxx

# AWS settings (if using AWS services)
# AWS_ACCESS_KEY_ID=your_access_key
# AWS_SECRET_ACCESS_KEY=your_secret_key
# AWS_DEFAULT_REGION=us-east-1

# Google Cloud settings (if using GCP)
# GOOGLE_APPLICATION_CREDENTIALS=/path/to/service-account.json
# GOOGLE_CLOUD_PROJECT=your-project-id

# ===========================================
# üè• HEALTH CHECK SETTINGS
# ===========================================

# Health check intervals
HEALTH_CHECK_INTERVAL=300  # 5 minutes

# Health check endpoints
HEALTH_CHECK_DATABASE=true
HEALTH_CHECK_TELEGRAM=true
HEALTH_CHECK_SCRAPER=true

# ===========================================
# üéØ FEATURE FLAGS (Optional)
# ===========================================

# Enable/disable features
FEATURE_ANALYTICS=true
FEATURE_USER_STATS=true
FEATURE_ADMIN_COMMANDS=false
FEATURE_PREMIUM_FEATURES=false
FEATURE_MULTI_LANGUAGE=false

# Experimental features
EXPERIMENTAL_API_CACHING=false
EXPERIMENTAL_BATCH_PROCESSING=false
EXPERIMENTAL_MACHINE_LEARNING=false

# ===========================================
# üìù NOTES FOR DEPLOYMENT
# ===========================================

# 1. Never commit the actual .env file to version control
# 2. Use Render's environment variables interface to set production values
# 3. For MongoDB, use MongoDB Atlas (free tier available)
# 4. Get Telegram bot token from @BotFather
# 5. Set WEBHOOK_URL to your Render app URL + /telegram-webhook
# 6. Start with default values and tune performance based on usage
# 7. Enable monitoring and logging for production deployments

# ===========================================
# üîó USEFUL LINKS
# ===========================================

# Telegram Bot API: https://core.telegram.org/bots/api
# MongoDB Atlas: https://cloud.mongodb.com/
# Render Documentation: https://render.com/docs
# GitHub Actions: https://docs.github.com/en/actions
# Environment Variables Security: https://render.com/docs/environment-variables
